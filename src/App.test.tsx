import { render, screen, fireEvent, within } from '@testing-library/react'
import App from './App'

it('correct to add new todo', () => {
	render(<App />)

	const input = screen.getByTestId('todo-input')
	const addTodoBtn = screen.getByTestId('todo-button')
	const todoList = screen.getByTestId('todo-list')
	fireEvent.input(input, { target: { value: 'Написать тесты' } })
	fireEvent.click(addTodoBtn)
	const { getAllByTestId } = within(todoList)
	expect(getAllByTestId('todo-item')).toHaveLength(1)
})
it('don`t add empty todo', () => {
	render(<App />)
	const input = screen.getByTestId('todo-input')
	const addTodoBtn = screen.getByTestId('todo-button')
	const todoList = screen.getByTestId('todo-list')
	const { queryByTestId } = within(todoList)
	fireEvent.input(input, { target: { value: '   ' } })
	fireEvent.click(addTodoBtn)
	expect(queryByTestId('todo-item')).not.toBeInTheDocument()
})

it('correct set filter', () => {
	render(<App />)
	const input = screen.getByTestId('todo-input')
	const addTodoBtn = screen.getByTestId('todo-button')
	const todoList = screen.getByTestId('todo-list')

	const { getByText, getAllByTestId } = within(todoList)
	fireEvent.input(input, { target: { value: 'Выполнить задачу 1' } })
	fireEvent.click(addTodoBtn)
	fireEvent.click(getByText('Выполнить задачу 1'))
	fireEvent.input(input, { target: { value: 'Выполнить задачу 2' } })
	fireEvent.click(addTodoBtn)
	fireEvent.input(input, { target: { value: 'Выполнить задачу 3' } })
	fireEvent.click(addTodoBtn)
	expect(getAllByTestId('todo-item')).toHaveLength(3)
	fireEvent.click(screen.getByText('Completed'))
	expect(getAllByTestId('todo-item')).toHaveLength(1)
	fireEvent.click(screen.getByText('Active'))
	expect(getAllByTestId('todo-item')).toHaveLength(2)
})

it('clear button correct works', () => {
	render(<App />)
	const input = screen.getByTestId('todo-input')
	const addTodoBtn = screen.getByTestId('todo-button')
	const todoList = screen.getByTestId('todo-list')
	const clearBtn = screen.getByTestId('clear-btn')

	const { getAllByTestId, getByText, queryByTestId } = within(todoList)
	fireEvent.input(input, { target: { value: 'Выполнить задачу 1' } })
	fireEvent.click(addTodoBtn)
	fireEvent.input(input, { target: { value: 'Выполнить задачу 2' } })
	fireEvent.click(addTodoBtn)
	fireEvent.input(input, { target: { value: 'Выполнить задачу 3' } })
	fireEvent.click(addTodoBtn)
	fireEvent.click(getByText('Выполнить задачу 1'))
	fireEvent.click(getByText('Выполнить задачу 2'))
	fireEvent.click(getByText('Выполнить задачу 3'))
	expect(getAllByTestId('todo-item')).toHaveLength(3)
	fireEvent.click(clearBtn)
	expect(queryByTestId('todo-item')).not.toBeInTheDocument()
})

it('left counter correct works', () => {
	render(<App />)
	const input = screen.getByTestId('todo-input')
	const addTodoBtn = screen.getByTestId('todo-button')
	const todoCount = screen.getByTestId('todo-count')

	fireEvent.input(input, { target: { value: 'Выполнить задачу 1' } })
	fireEvent.click(addTodoBtn)
	fireEvent.input(input, { target: { value: 'Выполнить задачу 2' } })
	fireEvent.click(addTodoBtn)
	fireEvent.input(input, { target: { value: 'Выполнить задачу 3' } })
	fireEvent.click(addTodoBtn)
	fireEvent.click(screen.getByText('Выполнить задачу 1'))
	expect(todoCount.textContent).toContain('2')
	fireEvent.click(screen.getByText('Выполнить задачу 2'))
	fireEvent.click(screen.getByText('Выполнить задачу 3'))
	expect(todoCount.textContent).toContain('0')
})
